generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum InstanceConnectionStatus {
  ONLINE
  OFFLINE
}

model Instance {
  id               Int                       @id @default(autoincrement())
  name             String                    @unique @db.VarChar(255)
  description      String?                   @db.VarChar(255)
  connectionStatus InstanceConnectionStatus? @default(OFFLINE)
  ownerJid         String?                   @db.VarChar(100)
  profilePicUrl    String?                   @db.VarChar(500)
  createdAt        DateTime?                 @default(now())
  updatedAt        DateTime?                 @updatedAt
  Auth             Auth?
  Chat             Chat[]
  Contact          Contact[]
  Webhook          Webhook?
  ActivityLogs     ActivityLogs[]
  Message          Message[]
}

model Auth {
  id         Int       @id @default(autoincrement())
  token      String    @unique
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  Instance   Instance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId Int       @unique
}

enum MessageSource {
  ios
  android
  web
}

enum DeviceMessage {
  ios
  android
  web
  unknown
  desktop
}

model Message {
  id               Int             @id @default(autoincrement())
  keyId            String          @db.VarChar(100)
  keyRemoteJid     String          @db.VarChar(100)
  keyFromMe        Boolean
  keyParticipant   String?         @db.VarChar(100)
  pushName         String?         @db.VarChar(100)
  messageType      String          @db.VarChar(100)
  content          Json
  messageTimestamp Int
  device           DeviceMessage
  isGroup          Boolean?
  Instance         Instance        @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId       Int
  MessageUpdate    MessageUpdate[]
  Media            Media?

  @@index([keyId], name: "keyId")
}

model Media {
  id        Int       @id @default(autoincrement())
  fileName  String    @unique @db.VarChar(500)
  type      String    @db.VarChar(100)
  mimetype  String    @db.VarChar(100)
  createdAt DateTime? @default(now())
  Message   Message   @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId Int       @unique
}

model MessageUpdate {
  id        Int      @id @default(autoincrement())
  dateTime  DateTime
  status    String   @db.VarChar(30)
  Message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId Int
}

model Chat {
  id         Int       @id @default(autoincrement())
  remoteJid  String    @db.VarChar(100)
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  Instance   Instance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId Int
}

model Contact {
  id            Int       @id @default(autoincrement())
  remoteJid     String    @db.VarChar(100)
  pushName      String?   @db.VarChar(100)
  profilePicUrl String?   @db.VarChar(500)
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
  Instance      Instance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId    Int
}

model Webhook {
  id         Int       @id @default(autoincrement())
  url        String    @db.VarChar(500)
  enabled    Boolean?  @default(true)
  events     Json?
  createdAt  DateTime? @default(now())
  updatedAt  DateTime  @updatedAt
  Instance   Instance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId Int       @unique
}

enum TypebotSessionStatus {
  open
  closed
  paused
}

enum StartConversationAs {
  open
  pending
}

model ActivityLogs {
  id          Int       @id @default(autoincrement())
  dateTime    DateTime? @default(now())
  context     String?   @db.VarChar(100)
  type        String?   @db.VarChar(100)
  content     Json?
  description String?   @db.VarChar(500)
  Instance    Instance? @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId  Int?      
}
